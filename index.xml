<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Introduction on Visual Computing</title><link>https://imgamp.github.io/visualcomputing.github.io/</link><description>Recent content in Introduction on Visual Computing</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://imgamp.github.io/visualcomputing.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Creating a New Theme</title><link>https://imgamp.github.io/visualcomputing.github.io/posts/creating-a-new-theme/</link><pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate><guid>https://imgamp.github.io/visualcomputing.github.io/posts/creating-a-new-theme/</guid><description>Introduction # This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description></item><item><title>Migrate to Hugo from Jekyll</title><link>https://imgamp.github.io/visualcomputing.github.io/posts/migrate-from-jekyll/</link><pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate><guid>https://imgamp.github.io/visualcomputing.github.io/posts/migrate-from-jekyll/</guid><description>Move static content to static # Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/ ▾ images/ logo.png should become
▾ &amp;lt;root&amp;gt;/ ▾ static/ ▾ images/ logo.png Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description></item><item><title>(Hu)go Template Primer</title><link>https://imgamp.github.io/visualcomputing.github.io/posts/goisforlovers/</link><pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate><guid>https://imgamp.github.io/visualcomputing.github.io/posts/goisforlovers/</guid><description>Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.
This document is a brief primer on using Go templates.</description></item><item><title>Getting Started with Hugo</title><link>https://imgamp.github.io/visualcomputing.github.io/posts/hugoisforlovers/</link><pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate><guid>https://imgamp.github.io/visualcomputing.github.io/posts/hugoisforlovers/</guid><description>Step 1. Install Hugo # Go to Hugo releases and download the appropriate version for your OS and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at Install Hugo
Step 2. Build the Docs # Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:</description></item><item><title/><link>https://imgamp.github.io/visualcomputing.github.io/docs/shortcodes/integrantes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://imgamp.github.io/visualcomputing.github.io/docs/shortcodes/integrantes/</guid><description> Integrantes # El desarrollo del siguiente repositorio se realiza con los siguientes dos integrsntes:
Cristian Camilo Rueda Alzate # Gustavo Adolfo Mojica Perdigon #</description></item><item><title/><link>https://imgamp.github.io/visualcomputing.github.io/docs/shortcodes/Taller1/ilusiones/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://imgamp.github.io/visualcomputing.github.io/docs/shortcodes/Taller1/ilusiones/</guid><description>Ilusiones # Ilusion 1 # El tamaño si importa, cuando uno va a un restaurante y le sirven una cantidad en un plato pequeño, uno va asentirse más sacead, mientras que esa misma cantidad se va a ver más pequeña. Un efecto simiar a lo que sucede con la ilusión de Ebbinghaus. En la ilusión de Ebbinghaus, se ven dos anillos de discos azules uno con los discos grandes y otro con los discos pequeños, en el centro de ambos anillos hay dos discos naranjas que a pesar de que no lo parezcan tienen igual tamaño; la ilusión lleva el nombre de Hermann Ebbinghaus, un pionero en la investigación de la memoria.</description></item><item><title/><link>https://imgamp.github.io/visualcomputing.github.io/docs/shortcodes/Taller1/masking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://imgamp.github.io/visualcomputing.github.io/docs/shortcodes/Taller1/masking/</guid><description>Masking # Kernels # Un kernel, matriz de convolución o máscara es una pequeña matriz que se utiliza en el procesamiento de imágenes para desenfocar, enfocar, resaltar, detectar bordes, etc. Para ello se utiliza la convolución entre el núcleo y una imagen.
La función gaussiana se utiliza para desenfocar una imagen y recibe su nombre del matemático y científico Carl Friedrich Gauss. Esta técnica se aplica con frecuencia para minimizar el ruido de la imagen y mejorar la claridad.</description></item></channel></rss>